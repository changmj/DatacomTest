// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace DatacomTest.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::NUnit.Framework.TestFixtureAttribute()]
    [global::NUnit.Framework.DescriptionAttribute("Register")]
    [global::NUnit.Framework.FixtureLifeCycleAttribute(global::NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class RegisterFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Register", "Testing Register feature", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
#line 1 "Register.feature"
#line hidden
        
        [global::NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [global::NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        [global::NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [global::NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::NUnit.Framework.TestContext>(global::NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 5
#line hidden
#line 6
 await testRunner.GivenAsync("open the register page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/Register.feature", 16);
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Verify the labels, styles, placehoders and help text of each feild")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task VerifyTheLabelsStylesPlacehodersAndHelpTextOfEachFeild()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify the labels, styles, placehoders and help text of each feild", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the apperence of the form page", null, tagsOfRule);
#line 12
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "field name",
                            "required",
                            "help text"});
                table1.AddRow(new string[] {
                            "First Name",
                            "true",
                            ""});
                table1.AddRow(new string[] {
                            "Last Name",
                            "true",
                            ""});
                table1.AddRow(new string[] {
                            "Phone number",
                            "true",
                            "Phone length validation: at least 10 digits"});
                table1.AddRow(new string[] {
                            "Country",
                            "true",
                            ""});
                table1.AddRow(new string[] {
                            "Email address",
                            "true",
                            ""});
                table1.AddRow(new string[] {
                            "Password",
                            "true",
                            "Psw length validation: [6,20] characters"});
#line 13
  await testRunner.ThenAsync("The Labels, styles, placehoders and help text of each feild should looks like as " +
                        "below:", ((string)(null)), table1, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("The check box for the agreement of terms and conditions should be able to editabl" +
            "e")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task TheCheckBoxForTheAgreementOfTermsAndConditionsShouldBeAbleToEditable()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("The check box for the agreement of terms and conditions should be able to editabl" +
                    "e", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the apperence of the form page", null, tagsOfRule);
#line 23
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 24
  await testRunner.ThenAsync("The check box for the agreement of terms and conditions should be able to editabl" +
                        "e", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Should be able to open terms and conditions")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task ShouldBeAbleToOpenTermsAndConditions()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Should be able to open terms and conditions", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the apperence of the form page", null, tagsOfRule);
#line 27
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 28
  await testRunner.ThenAsync("there should a link on the field to open the terms and conditions", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Password should be displayed as hidden text")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task PasswordShouldBeDisplayedAsHiddenText()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Password should be displayed as hidden text", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the apperence of the form page", null, tagsOfRule);
#line 31
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 32
  await testRunner.ThenAsync("Password should be displayed as hidden text", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Should have confirm Password field to compare with the characoters in password fi" +
            "eld")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task ShouldHaveConfirmPasswordFieldToCompareWithTheCharacotersInPasswordField()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "4";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Should have confirm Password field to compare with the characoters in password fi" +
                    "eld", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the apperence of the form page", null, tagsOfRule);
#line 35
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 36
  await testRunner.ThenAsync("Should have confirm Password field", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Veirfy drop down items of drop down List (each item should have unique value and " +
            "text)")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task VeirfyDropDownItemsOfDropDownListEachItemShouldHaveUniqueValueAndText()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "5";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Veirfy drop down items of drop down List (each item should have unique value and " +
                    "text)", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the apperence of the form page", null, tagsOfRule);
#line 39
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 40
  await testRunner.ThenAsync("each drop down item should have unique value and text", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Veirfy the empty input of each input field")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task VeirfyTheEmptyInputOfEachInputField()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "6";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Veirfy the empty input of each input field", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the valication if each field", null, tagsOfRule);
#line 50
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 46
  await testRunner.GivenAsync("input valid data to all of the fields (Note: except term check box. It\'s blocked " +
                        "by a defect)", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 51
  await testRunner.WhenAsync("I change the value in following field to empty", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 52
  await testRunner.AndAsync("click the register button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
  await testRunner.ThenAsync("[outcome]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Veirfy the empty string of each input field")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task VeirfyTheEmptyStringOfEachInputField()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "7";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Veirfy the empty string of each input field", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the valication if each field", null, tagsOfRule);
#line 56
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 46
  await testRunner.GivenAsync("input valid data to all of the fields (Note: except term check box. It\'s blocked " +
                        "by a defect)", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 57
  await testRunner.GivenAsync("[context]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 58
  await testRunner.WhenAsync("[action]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 59
  await testRunner.ThenAsync("[outcome]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Veirfy the input type of each input field")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task VeirfyTheInputTypeOfEachInputField()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "8";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Veirfy the input type of each input field", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the valication if each field", null, tagsOfRule);
#line 62
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 46
  await testRunner.GivenAsync("input valid data to all of the fields (Note: except term check box. It\'s blocked " +
                        "by a defect)", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 63
  await testRunner.GivenAsync("[context]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 64
  await testRunner.WhenAsync("[action]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 65
  await testRunner.ThenAsync("[outcome]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Veirfy the max length of each input field")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task VeirfyTheMaxLengthOfEachInputField()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "9";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Veirfy the max length of each input field", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the valication if each field", null, tagsOfRule);
#line 68
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 46
  await testRunner.GivenAsync("input valid data to all of the fields (Note: except term check box. It\'s blocked " +
                        "by a defect)", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 69
  await testRunner.GivenAsync("[context]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 70
  await testRunner.WhenAsync("[action]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 71
  await testRunner.ThenAsync("[outcome]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Veirfy the value of select control")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task VeirfyTheValueOfSelectControl()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "10";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Veirfy the value of select control", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the valication if each field", null, tagsOfRule);
#line 74
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 46
  await testRunner.GivenAsync("input valid data to all of the fields (Note: except term check box. It\'s blocked " +
                        "by a defect)", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 75
  await testRunner.GivenAsync("[context]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 76
  await testRunner.WhenAsync("[action]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 77
  await testRunner.ThenAsync("[outcome]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Veirfy the value of check box control")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task VeirfyTheValueOfCheckBoxControl()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "11";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Veirfy the value of check box control", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the valication if each field", null, tagsOfRule);
#line 80
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
#line 46
  await testRunner.GivenAsync("input valid data to all of the fields (Note: except term check box. It\'s blocked " +
                        "by a defect)", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 81
  await testRunner.GivenAsync("[context]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 82
  await testRunner.WhenAsync("[action]", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 83
  await testRunner.ThenAsync("[outcome]", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Verify the massage and style")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task VerifyTheMassageAndStyle()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "12";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify the massage and style", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the form commit action", null, tagsOfRule);
#line 89
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Country",
                            "EmailAddress",
                            "Password",
                            "Agree"});
                table2.AddRow(new string[] {
                            "John",
                            "Li",
                            "0243334456",
                            "New Zealand",
                            "John.Li@hotmail.com",
                            "123456",
                            "ture"});
#line 90
  await testRunner.WhenAsync("fill in valid values as following and click register button", ((string)(null)), table2, "When ");
#line hidden
#line 93
  await testRunner.ThenAsync("the backgound of the message should be green", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("Verify the data is correct saved")]
        [global::NUnit.Framework.CategoryAttribute("E2E")]
        public async global::System.Threading.Tasks.Task VerifyTheDataIsCorrectSaved()
        {
            string[] tagsOfScenario = new string[] {
                    "E2E"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "13";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify the data is correct saved", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = new global::Reqnroll.RuleInfo("Verify the form commit action", null, tagsOfRule);
#line 96
 this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "PhoneNumber",
                            "Country",
                            "EmailAddress",
                            "Password",
                            "Agree"});
                table3.AddRow(new string[] {
                            "John",
                            "Li",
                            "0243334456",
                            "New Zealand",
                            "John.Li@hotmail.com",
                            "123456",
                            "ture"});
#line 97
  await testRunner.WhenAsync("fill in valid values as following and click register button", ((string)(null)), table3, "When ");
#line hidden
#line 101
  await testRunner.ThenAsync("there is a successful message", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
